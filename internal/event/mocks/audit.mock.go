// Code generated by MockGen. DO NOT EDIT.
// Source: ./audit_result_event_producer.go
//
// Generated by this command:
//
//	mockgen -source=./audit_result_event_producer.go -package=evtmocks -destination=../mocks/audit.mock.go -typed ResultCallbackEventProducer
//

// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	reflect "reflect"

	audit "notification-platform/internal/event/audit"
	gomock "go.uber.org/mock/gomock"
)

// MockResultCallbackEventProducer is a mock of ResultCallbackEventProducer interface.
type MockResultCallbackEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockResultCallbackEventProducerMockRecorder
	isgomock struct{}
}

// MockResultCallbackEventProducerMockRecorder is the mock recorder for MockResultCallbackEventProducer.
type MockResultCallbackEventProducerMockRecorder struct {
	mock *MockResultCallbackEventProducer
}

// NewMockResultCallbackEventProducer creates a new mock instance.
func NewMockResultCallbackEventProducer(ctrl *gomock.Controller) *MockResultCallbackEventProducer {
	mock := &MockResultCallbackEventProducer{ctrl: ctrl}
	mock.recorder = &MockResultCallbackEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultCallbackEventProducer) EXPECT() *MockResultCallbackEventProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockResultCallbackEventProducer) Produce(ctx context.Context, evt audit.CallbackResultEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockResultCallbackEventProducerMockRecorder) Produce(ctx, evt any) *MockResultCallbackEventProducerProduceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockResultCallbackEventProducer)(nil).Produce), ctx, evt)
	return &MockResultCallbackEventProducerProduceCall{Call: call}
}

// MockResultCallbackEventProducerProduceCall wrap *gomock.Call
type MockResultCallbackEventProducerProduceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResultCallbackEventProducerProduceCall) Return(arg0 error) *MockResultCallbackEventProducerProduceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResultCallbackEventProducerProduceCall) Do(f func(context.Context, audit.CallbackResultEvent) error) *MockResultCallbackEventProducerProduceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResultCallbackEventProducerProduceCall) DoAndReturn(f func(context.Context, audit.CallbackResultEvent) error) *MockResultCallbackEventProducerProduceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
