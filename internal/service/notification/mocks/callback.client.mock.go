// Code generated by MockGen. DO NOT EDIT.
// Source: ./notification_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./notification_grpc.pb.go -destination=../../../../../internal/service/notification/mocks/callback.client.mock.go -package=callbackmocks -typed CallbackServiceClient
//

// Package notificationmocks is a generated GoMock package.
package notificationmocks

import (
	context "context"
	reflect "reflect"

	clientv1 "notification-platform/api/proto/gen/client/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCallbackServiceClient is a mock of CallbackServiceClient interface.
type MockCallbackServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackServiceClientMockRecorder
	isgomock struct{}
}

// MockCallbackServiceClientMockRecorder is the mock recorder for MockCallbackServiceClient.
type MockCallbackServiceClientMockRecorder struct {
	mock *MockCallbackServiceClient
}

// NewMockCallbackServiceClient creates a new mock instance.
func NewMockCallbackServiceClient(ctrl *gomock.Controller) *MockCallbackServiceClient {
	mock := &MockCallbackServiceClient{ctrl: ctrl}
	mock.recorder = &MockCallbackServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbackServiceClient) EXPECT() *MockCallbackServiceClientMockRecorder {
	return m.recorder
}

// HandleNotificationResult mocks base method.
func (m *MockCallbackServiceClient) HandleNotificationResult(ctx context.Context, in *clientv1.HandleNotificationResultRequest, opts ...grpc.CallOption) (*clientv1.HandleNotificationResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleNotificationResult", varargs...)
	ret0, _ := ret[0].(*clientv1.HandleNotificationResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleNotificationResult indicates an expected call of HandleNotificationResult.
func (mr *MockCallbackServiceClientMockRecorder) HandleNotificationResult(ctx, in any, opts ...any) *MockCallbackServiceClientHandleNotificationResultCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotificationResult", reflect.TypeOf((*MockCallbackServiceClient)(nil).HandleNotificationResult), varargs...)
	return &MockCallbackServiceClientHandleNotificationResultCall{Call: call}
}

// MockCallbackServiceClientHandleNotificationResultCall wrap *gomock.Call
type MockCallbackServiceClientHandleNotificationResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbackServiceClientHandleNotificationResultCall) Return(arg0 *clientv1.HandleNotificationResultResponse, arg1 error) *MockCallbackServiceClientHandleNotificationResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbackServiceClientHandleNotificationResultCall) Do(f func(context.Context, *clientv1.HandleNotificationResultRequest, ...grpc.CallOption) (*clientv1.HandleNotificationResultResponse, error)) *MockCallbackServiceClientHandleNotificationResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbackServiceClientHandleNotificationResultCall) DoAndReturn(f func(context.Context, *clientv1.HandleNotificationResultRequest, ...grpc.CallOption) (*clientv1.HandleNotificationResultResponse, error)) *MockCallbackServiceClientHandleNotificationResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCallbackServiceServer is a mock of CallbackServiceServer interface.
type MockCallbackServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackServiceServerMockRecorder
	isgomock struct{}
}

// MockCallbackServiceServerMockRecorder is the mock recorder for MockCallbackServiceServer.
type MockCallbackServiceServerMockRecorder struct {
	mock *MockCallbackServiceServer
}

// NewMockCallbackServiceServer creates a new mock instance.
func NewMockCallbackServiceServer(ctrl *gomock.Controller) *MockCallbackServiceServer {
	mock := &MockCallbackServiceServer{ctrl: ctrl}
	mock.recorder = &MockCallbackServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbackServiceServer) EXPECT() *MockCallbackServiceServerMockRecorder {
	return m.recorder
}

// HandleNotificationResult mocks base method.
func (m *MockCallbackServiceServer) HandleNotificationResult(arg0 context.Context, arg1 *clientv1.HandleNotificationResultRequest) (*clientv1.HandleNotificationResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNotificationResult", arg0, arg1)
	ret0, _ := ret[0].(*clientv1.HandleNotificationResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleNotificationResult indicates an expected call of HandleNotificationResult.
func (mr *MockCallbackServiceServerMockRecorder) HandleNotificationResult(arg0, arg1 any) *MockCallbackServiceServerHandleNotificationResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotificationResult", reflect.TypeOf((*MockCallbackServiceServer)(nil).HandleNotificationResult), arg0, arg1)
	return &MockCallbackServiceServerHandleNotificationResultCall{Call: call}
}

// MockCallbackServiceServerHandleNotificationResultCall wrap *gomock.Call
type MockCallbackServiceServerHandleNotificationResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbackServiceServerHandleNotificationResultCall) Return(arg0 *clientv1.HandleNotificationResultResponse, arg1 error) *MockCallbackServiceServerHandleNotificationResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbackServiceServerHandleNotificationResultCall) Do(f func(context.Context, *clientv1.HandleNotificationResultRequest) (*clientv1.HandleNotificationResultResponse, error)) *MockCallbackServiceServerHandleNotificationResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbackServiceServerHandleNotificationResultCall) DoAndReturn(f func(context.Context, *clientv1.HandleNotificationResultRequest) (*clientv1.HandleNotificationResultResponse, error)) *MockCallbackServiceServerHandleNotificationResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnsafeCallbackServiceServer is a mock of UnsafeCallbackServiceServer interface.
type MockUnsafeCallbackServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCallbackServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeCallbackServiceServerMockRecorder is the mock recorder for MockUnsafeCallbackServiceServer.
type MockUnsafeCallbackServiceServerMockRecorder struct {
	mock *MockUnsafeCallbackServiceServer
}

// NewMockUnsafeCallbackServiceServer creates a new mock instance.
func NewMockUnsafeCallbackServiceServer(ctrl *gomock.Controller) *MockUnsafeCallbackServiceServer {
	mock := &MockUnsafeCallbackServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCallbackServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCallbackServiceServer) EXPECT() *MockUnsafeCallbackServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCallbackServiceServer mocks base method.
func (m *MockUnsafeCallbackServiceServer) mustEmbedUnimplementedCallbackServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCallbackServiceServer")
}

// mustEmbedUnimplementedCallbackServiceServer indicates an expected call of mustEmbedUnimplementedCallbackServiceServer.
func (mr *MockUnsafeCallbackServiceServerMockRecorder) mustEmbedUnimplementedCallbackServiceServer() *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCallbackServiceServer", reflect.TypeOf((*MockUnsafeCallbackServiceServer)(nil).mustEmbedUnimplementedCallbackServiceServer))
	return &MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall{Call: call}
}

// MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall wrap *gomock.Call
type MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall) Return() *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall) Do(f func()) *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall) DoAndReturn(f func()) *MockUnsafeCallbackServiceServermustEmbedUnimplementedCallbackServiceServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
