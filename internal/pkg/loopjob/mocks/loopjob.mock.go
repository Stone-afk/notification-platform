// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/meoying/dlock-go (interfaces: Client,Lock)
//
// Generated by this command:
//
//	mockgen -destination=./internal/pkg/loopjob/mocks/loopjob.mock.go -package=loopjobmocks github.com/meoying/dlock-go Client,Lock
//

// Package loopjobmocks is a generated GoMock package.
package loopjobmocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dlock "github.com/meoying/dlock-go"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// NewLock mocks base method.
func (m *MockClient) NewLock(ctx context.Context, key string, expiration time.Duration) (dlock.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLock", ctx, key, expiration)
	ret0, _ := ret[0].(dlock.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLock indicates an expected call of NewLock.
func (mr *MockClientMockRecorder) NewLock(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLock", reflect.TypeOf((*MockClient)(nil).NewLock), ctx, key, expiration)
}

// MockLock is a mock of Lock interface.
type MockLock struct {
	ctrl     *gomock.Controller
	recorder *MockLockMockRecorder
	isgomock struct{}
}

// MockLockMockRecorder is the mock recorder for MockLock.
type MockLockMockRecorder struct {
	mock *MockLock
}

// NewMockLock creates a new mock instance.
func NewMockLock(ctrl *gomock.Controller) *MockLock {
	mock := &MockLock{ctrl: ctrl}
	mock.recorder = &MockLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLock) EXPECT() *MockLockMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLock) Lock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockMockRecorder) Lock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLock)(nil).Lock), ctx)
}

// Refresh mocks base method.
func (m *MockLock) Refresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockLockMockRecorder) Refresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockLock)(nil).Refresh), ctx)
}

// Unlock mocks base method.
func (m *MockLock) Unlock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockMockRecorder) Unlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLock)(nil).Unlock), ctx)
}
