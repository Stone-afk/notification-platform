// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go
//
// Generated by this command:
//
//	mockgen -source=./config.go -destination=./mocks/config.mock.go -package=configmocks -typed BusinessConfigService
//
// Package configmocks is a generated GoMock package.
package configmocks

import (
	context "context"
	reflect "reflect"

	domain "notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBusinessConfigService is a mock of BusinessConfigService interface.
type MockBusinessConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessConfigServiceMockRecorder
}

// MockBusinessConfigServiceMockRecorder is the mock recorder for MockBusinessConfigService.
type MockBusinessConfigServiceMockRecorder struct {
	mock *MockBusinessConfigService
}

// NewMockBusinessConfigService creates a new mock instance.
func NewMockBusinessConfigService(ctrl *gomock.Controller) *MockBusinessConfigService {
	mock := &MockBusinessConfigService{ctrl: ctrl}
	mock.recorder = &MockBusinessConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessConfigService) EXPECT() *MockBusinessConfigServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBusinessConfigService) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBusinessConfigServiceMockRecorder) Delete(ctx, id any) *BusinessConfigServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBusinessConfigService)(nil).Delete), ctx, id)
	return &BusinessConfigServiceDeleteCall{Call: call}
}

// BusinessConfigServiceDeleteCall wrap *gomock.Call
type BusinessConfigServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BusinessConfigServiceDeleteCall) Return(arg0 error) *BusinessConfigServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BusinessConfigServiceDeleteCall) Do(f func(context.Context, int64) error) *BusinessConfigServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BusinessConfigServiceDeleteCall) DoAndReturn(f func(context.Context, int64) error) *BusinessConfigServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockBusinessConfigService) GetByID(ctx context.Context, id int64) (domain.BusinessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByID", ctx, id)
	ret0, _ := ret[0].(domain.BusinessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBusinessConfigServiceMockRecorder) GetByID(ctx, id any) *BusinessConfigServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByID", reflect.TypeOf((*MockBusinessConfigService)(nil).GetByID), ctx, id)
	return &BusinessConfigServiceGetByIDCall{Call: call}
}

// BusinessConfigServiceGetByIDCall wrap *gomock.Call
type BusinessConfigServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BusinessConfigServiceGetByIDCall) Return(arg0 domain.BusinessConfig, arg1 error) *BusinessConfigServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BusinessConfigServiceGetByIDCall) Do(f func(context.Context, int64) (domain.BusinessConfig, error)) *BusinessConfigServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BusinessConfigServiceGetByIDCall) DoAndReturn(f func(context.Context, int64) (domain.BusinessConfig, error)) *BusinessConfigServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByIDs mocks base method.
func (m *MockBusinessConfigService) GetByIDs(ctx context.Context, ids []int64) (map[int64]domain.BusinessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].(map[int64]domain.BusinessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockBusinessConfigServiceMockRecorder) GetByIDs(ctx, ids any) *BusinessConfigServiceGetByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockBusinessConfigService)(nil).GetByIDs), ctx, ids)
	return &BusinessConfigServiceGetByIDsCall{Call: call}
}

// BusinessConfigServiceGetByIDsCall wrap *gomock.Call
type BusinessConfigServiceGetByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BusinessConfigServiceGetByIDsCall) Return(arg0 map[int64]domain.BusinessConfig, arg1 error) *BusinessConfigServiceGetByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BusinessConfigServiceGetByIDsCall) Do(f func(context.Context, []int64) (map[int64]domain.BusinessConfig, error)) *BusinessConfigServiceGetByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BusinessConfigServiceGetByIDsCall) DoAndReturn(f func(context.Context, []int64) (map[int64]domain.BusinessConfig, error)) *BusinessConfigServiceGetByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveConfig mocks base method.
func (m *MockBusinessConfigService) SaveConfig(ctx context.Context, config domain.BusinessConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockBusinessConfigServiceMockRecorder) SaveConfig(ctx, config any) *BusinessConfigServiceSaveConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockBusinessConfigService)(nil).SaveConfig), ctx, config)
	return &BusinessConfigServiceSaveConfigCall{Call: call}
}

// BusinessConfigServiceSaveConfigCall wrap *gomock.Call
type BusinessConfigServiceSaveConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BusinessConfigServiceSaveConfigCall) Return(arg0 error) *BusinessConfigServiceSaveConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BusinessConfigServiceSaveConfigCall) Do(f func(context.Context, domain.BusinessConfig) error) *BusinessConfigServiceSaveConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BusinessConfigServiceSaveConfigCall) DoAndReturn(f func(context.Context, domain.BusinessConfig) error) *BusinessConfigServiceSaveConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
