// Code generated by MockGen. DO NOT EDIT.
// Source: ./manage.go
//
// Generated by this command:
//
//	mockgen -source=./manage.go -destination=../mocks/manage.mock.go -package=providermocks -typed Service
//

// Package providermocks is a generated GoMock package.
package providermocks

import (
	context "context"
	reflect "reflect"

	domain "notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, provider domain.Provider) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, provider)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, provider any) *MockServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, provider)
	return &MockServiceCreateCall{Call: call}
}

// MockServiceCreateCall wrap *gomock.Call
type MockServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateCall) Return(arg0 domain.Provider, arg1 error) *MockServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateCall) Do(f func(context.Context, domain.Provider) (domain.Provider, error)) *MockServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateCall) DoAndReturn(f func(context.Context, domain.Provider) (domain.Provider, error)) *MockServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByChannel mocks base method.
func (m *MockService) GetByChannel(ctx context.Context, channel domain.Channel) ([]domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByChannel", ctx, channel)
	ret0, _ := ret[0].([]domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByChannel indicates an expected call of GetByChannel.
func (mr *MockServiceMockRecorder) GetByChannel(ctx, channel any) *MockServiceGetByChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByChannel", reflect.TypeOf((*MockService)(nil).GetByChannel), ctx, channel)
	return &MockServiceGetByChannelCall{Call: call}
}

// MockServiceGetByChannelCall wrap *gomock.Call
type MockServiceGetByChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByChannelCall) Return(arg0 []domain.Provider, arg1 error) *MockServiceGetByChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByChannelCall) Do(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *MockServiceGetByChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByChannelCall) DoAndReturn(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *MockServiceGetByChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockService) GetByID(ctx context.Context, id int64) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByID", ctx, id)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(ctx, id any) *MockServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, id)
	return &MockServiceGetByIDCall{Call: call}
}

// MockServiceGetByIDCall wrap *gomock.Call
type MockServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByIDCall) Return(arg0 domain.Provider, arg1 error) *MockServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByIDCall) Do(f func(context.Context, int64) (domain.Provider, error)) *MockServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByIDCall) DoAndReturn(f func(context.Context, int64) (domain.Provider, error)) *MockServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, provider domain.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, provider any) *MockServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, provider)
	return &MockServiceUpdateCall{Call: call}
}

// MockServiceUpdateCall wrap *gomock.Call
type MockServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateCall) Return(arg0 error) *MockServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateCall) Do(f func(context.Context, domain.Provider) error) *MockServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateCall) DoAndReturn(f func(context.Context, domain.Provider) error) *MockServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
